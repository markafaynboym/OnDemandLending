"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
labs(title = "游늵 Total Mail-To-Fund by Campaign (04/30/2025 - 08-01-2025)",
x = "Mail Date",
y = "Total Mail-To-Fund (%)",,
fill = "Campaign") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
ggplotly(p)
p <- ggplot(plot_data_datecutoff %>% filter( mail_date <= as.Date("2025-08-01")), aes(x = campaign_name, y = fundings_per_10k, fill = campaign_name)) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
labs(title = "游늵 Total Mail-To-Fund by Campaign (05/05/2025 - 08-01-2025)",
x = "Mail Date",
y = "Total Mail-To-Fund (%)",,
fill = "Campaign") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
ggplotly(p)
p <- ggplot(plot_data_datecutoff %>% filter( mail_date <= as.Date("2025-08-01")), aes(x = total_mail_pieces, y = fundings_per_10k, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 200, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Fundings vs Total Mail Pieces sent out (05/05/2025 - 08-01-2025)",
x = "Mail Date",
y = "Total Funded per 10k",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
p <- ggplot(plot_data_datecutoff %>% filter( mail_date <= as.Date("2025-08-01")), aes(x = mail_date , y = total_mail_pieces, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 2, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Total Mail Pieces by date sent out (05/05/2025 - 08-01-2025)",
x = "Mail Date",
y = "Total Mail by date",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(plotly)
library(knitr)
library(kableExtra)
library(DT)
library(patchwork)
# Load MailData.csv from 'data/processed' folder
maildata <- read_csv("../../data/processed/MailData.csv")
## Clean code and convert from strings to date and numeric format
# Clean column names from spaces and symbols(ASCII)
maildata <- janitor::clean_names(maildata)
# Convert date column
maildata <- maildata %>%
mutate(mail_date = mdy(mail_date))
# Convert percentage columns to numeric
percent_cols <- c("response_rate", "call_to_lock", "lock_to_fund")
maildata <- maildata %>%
mutate(across(all_of(percent_cols), ~ as.numeric(str_remove(., "%"))))
# Convert numeric columns
numeric_cols <- c("calls", "locks", "fundings")
maildata <- maildata %>%
mutate(across(all_of(numeric_cols), ~ as.numeric(.)))
# Create Mail Multiplier column
maildata <- maildata %>%
mutate(mail_multiplier = round(10000 / total_mail_pieces, 2))
# Apply multiplier to selected columns
scaled_cols <- c("calls", "locks", "fundings")
maildata <- maildata %>%
mutate(across(all_of(scaled_cols),
~ round(. * mail_multiplier),
.names = "{.col}_per_10k"))
# Render searchable table with column filters
datatable(
maildata,
filter = "top",  # 游녣 adds search boxes at the top of each column
options = list(
pageLength = 5,
scrollX = TRUE
),
rownames = FALSE,
caption = "游늶 Amsive Campaign Table with Column Filters"
)
# Prepare data
plot_data <- maildata  %>%   arrange(mail_date) %>%
mutate(campaign_name = factor(campaign_name, levels = c("Camber", "Monster", "Amsive", "Redstone")))
#%>%
# filter(!is.na(campaign_name), !is.na(response_rate)) %>%
#mutate(response_rate = as.numeric(response_rate))
# Build bar plot with uniform widths and ordered campaigns
p <- ggplot(plot_data, aes(x = mail_date, y = response_rate, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 7, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Response Rate Over Time by Campaign",
x = "Mail Date",
y = "Response Rate (%)",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Make it interactive
ggplotly(p)
# 游릴 Ensure mail_date is a proper Date
plot_data_YTD <- plot_data %>%
filter(mail_date >= as.Date("2024-12-30") )
p <- ggplot(plot_data_YTD, aes(x = mail_date, y = response_rate, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 6, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Response rate by Campaign (From 04/30/2025)",
x = "Mail Date",
y = "FResponse Rate (%) (%)",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
plot_data_datecutoff <- plot_data_YTD %>% filter(mail_date >= as.Date("2025-05-05"))
# 游릴 Build ggplot BoxPlot
p <- ggplot(plot_data_datecutoff %>% filter(!is.na(total_mail_pieces)), aes(x = campaign_name, y = response_rate, fill = campaign_name)) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
labs(title = "游늳 Response Rate by Campaign",
x = "Campaign Name",
y = "Response Rate (%)",
fill = "Campaign") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Make it interactive
ggplotly(p)
# Step 2: Split into groups
amsive_calls <- plot_data$calls_per_10k[plot_data$campaign_name == "Amsive"]
camber_calls <- plot_data$calls_per_10k[plot_data$campaign_name == "Camber"]
# Step 3: Run two-sample t-test
t.test(amsive_calls, camber_calls,
alternative = "two.sided",
var.equal = FALSE)  # Welch's t-test (default)
# Step 3: Run one sided test t-test
t.test(camber_calls,amsive_calls,
alternative = "greater",
var.equal = FALSE)  # Welch's t-test (default)
p <- ggplot(plot_data_datecutoff, aes(x = mail_date, y = call_to_lock, fill = campaign_name)) +
geom_col(position = position_dodge(width = 4), width = 2.6, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Call-To_lock by Campaign (From 04/30/2025)",
x = "Mail Date",
y = "Calls-To-Lock (%)",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
# 游릴 Build ggplot BoxPlot
p <- ggplot(plot_data_datecutoff %>% filter(!is.na(calls)), aes(x = campaign_name, y = call_to_lock, fill = campaign_name)) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
labs(title = "游늳 Call-To-Lock by Campaign (From 04/30/2025)",
x = "Campaign Name",
y = "Calls-To-Lock (%)",
fill = "Campaign") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Make it interactive
ggplotly(p)
# Step 2: Split into groups
amsive_calltolock <- plot_data_datecutoff$call_to_lock[plot_data$campaign_name == "Amsive"]
camber_calltolock <- plot_data_datecutoff$call_to_lock[plot_data$campaign_name == "Camber"]
# Step 3: Run two-sample t-test
t.test(amsive_calltolock, camber_calltolock,
alternative = "two.sided",
var.equal = FALSE)  # Welch's t-test (default)
# Step 3: Run one sided test t-test
t.test(camber_calltolock,amsive_calltolock,
alternative = "greater",
var.equal = FALSE)  # Welch's t-test (default)
p <- ggplot(plot_data_datecutoff, aes(x = mail_date, y = lock_to_fund, fill = campaign_name)) +
geom_col(position = position_dodge(width = 4), width = 2.6, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Lock-To-Fund by Campaign (From 04/30/2025)",
x = "Mail Date",
y = "Lock-To-Fund (%)",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
# 游릴 Build ggplot BoxPlot
p <- ggplot(plot_data_datecutoff %>% filter(!is.na(calls)), aes(x = campaign_name, y = lock_to_fund, fill = campaign_name)) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
labs(title = "游늳 Lock-To-Fund by Campaign (From 04/30/2025)",
x = "Campaign Name",
y = "Lock-To-Fund (%)",
fill = "Campaign") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Make it interactive
ggplotly(p)
# Load libraries
library(ggplot2)
library(plotly)
library(dplyr)
# Define color palette
campaign_colors <- c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA",
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)
# Base theme for smaller text
base_theme <- theme_minimal(base_size = 10)
# Create interactive bar charts
bar_response <- ggplotly(
ggplot(plot_data_datecutoff, aes(x = mail_date, y = response_rate, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 4, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = campaign_colors) +
labs(title = "Response Rate by Mail Date", x = "Mail Date", y = "Response Rate (%)", fill = "Campaign") +
base_theme +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
)
bar_call_to_lock <- ggplotly(
ggplot(plot_data_datecutoff, aes(x = mail_date, y = call_to_lock, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 4, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = campaign_colors) +
labs(title = "Call-to-Lock by Mail Date", x = "Mail Date", y = "Call-to-Lock (%)", fill = "Campaign") +
base_theme +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
)
bar_lock_to_fund <- ggplotly(
ggplot(plot_data_datecutoff, aes(x = mail_date, y = lock_to_fund, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 4, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = campaign_colors) +
labs(title = "Response rate                Call-To_lock              Lock-To-Fund by Campaign", x = "Mail Date", y = "Lock-to-Fund (%)", fill = "Campaign") +
base_theme +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
)
# Create interactive box plots
box_response <- ggplotly(
ggplot(plot_data_datecutoff, aes(x = campaign_name, y = response_rate, fill = campaign_name)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
scale_fill_manual(values = campaign_colors) +
labs(title = "Response Rate by Campaign", x = "Campaign", y = "Response Rate (%)") +
base_theme +
theme(legend.position = "none", axis.text.x = element_text(size = 8))
)
box_call_to_lock <- ggplotly(
ggplot(plot_data_datecutoff, aes(x = campaign_name, y = call_to_lock, fill = campaign_name)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
scale_fill_manual(values = campaign_colors) +
labs(title = "Call-to-Lock by Campaign", x = "Campaign", y = "Call-to-Lock (%)") +
base_theme +
theme(legend.position = "none", axis.text.x = element_text(size = 8))
)
box_lock_to_fund <- ggplotly(
ggplot(plot_data_datecutoff, aes(x = campaign_name, y = lock_to_fund, fill = campaign_name)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
scale_fill_manual(values = campaign_colors) +
labs(title = "Response rate                Call-To_lock              Lock-To-Fund by Campaign", x = "Campaign", y = "Lock-to-Fund (%)") +
base_theme +
theme(legend.position = "none", axis.text.x = element_text(size = 8))
)
#subplot(list(bar_response, bar_call_to_lock, bar_lock_to_fund))
subplot(list(box_response, box_call_to_lock, box_lock_to_fund))
p <- ggplot(plot_data_datecutoff, aes(x = mail_date, y = fundings_per_10k, fill = campaign_name)) +
geom_col(position = position_dodge(width = 4), width = 2.6, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Total Mail-To-Fund per 10K total mail by Campaign (From 04/30/2025)",
x = "Mail Date",
y = "Total Mail-To-Fund (%)",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
# 游릴 Build ggplot BoxPlot
p <- ggplot(plot_data_datecutoff %>% filter(!is.na(calls)), aes(x = campaign_name, y = fundings_per_10k, fill = campaign_name)) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
labs(title = "游늵 Total Mail-To-Fund by Campaign (From 04/30/2025)",
x = "Mail Date",
y = "Total Mail-To-Fund (%)",,
fill = "Campaign") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Make it interactive
ggplotly(p)
# Aggregate by month
monthly_data <- plot_data_datecutoff %>%
mutate(month = floor_date(mail_date, "month")) %>%
group_by(month, campaign_name) %>%
summarise(
fundings_per_10k = mean(fundings_per_10k, na.rm = TRUE),
.groups = "drop"
)
# Bar chart: average fundings_per_10k by month
bar_monthly <- ggplotly(
ggplot(monthly_data, aes(x = month, y = fundings_per_10k, fill = campaign_name)) +
geom_col(position = position_dodge(width = 5), width = 20, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = campaign_colors) +
labs(title = "Monthly Fundings per 10k Total Mail sent by Campaign", x = "Month", y = "Fundings per 10k", fill = "Campaign") +
theme_minimal(base_size = 10) +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
) %>% layout(title = list(text = "Monthly Fundings per 10k by Campaign"))
# Box plot: distribution of fundings_per_10k by campaign
box_monthly <- ggplotly(
ggplot(plot_data_datecutoff, aes(x = campaign_name, y = fundings_per_10k, fill = campaign_name)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
scale_fill_manual(values = campaign_colors) +
labs(title = "Distribution of Fundings per 10k by Campaign", x = "Campaign", y = "Fundings per 10k") +
theme_minimal(base_size = 10) +
theme(legend.position = "none", axis.text.x = element_text(size = 8))
) %>% layout(title = list(text = "Distribution of Fundings per 10k by Campaign"))
bar_monthly
p <- ggplot(plot_data_datecutoff %>% filter( mail_date <= as.Date("2025-08-01")), aes(x = mail_date , y = total_mail_pieces, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 2, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Total Mail Pieces by date sent out (05/05/2025 - 08-01-2025)",
x = "Mail Date",
y = "Total Mail by date",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
p <- ggplot(plot_data_datecutoff %>% filter( mail_date <= as.Date("2025-08-01")), aes(x = total_mail_pieces, y = fundings_per_10k, fill = campaign_name)) +
geom_col(position = position_dodge(width = 0.01), width = 200, color = "gray20", alpha = 0.85) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
labs(
title = "游늵 Fundings vs Total Mail Pieces sent out (05/05/2025 - 08-01-2025)",
x = "Mail Date",
y = "Total Funded per 10k",
fill = "Campaign"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
p <- ggplot(plot_data_datecutoff %>% filter( mail_date <= as.Date("2025-08-01")), aes(x = campaign_name, y = fundings_per_10k, fill = campaign_name)) +
scale_fill_manual(values = c(
"Camber" = "#E26E5F",
"Amsive" = "#44CDDA" ,
"Monster" = "#87d087",
"Redstone" = "#AD2E1D",
"Other" = "#979d5d"
)) +
geom_boxplot(alpha = 0.7, color = "gray20") +
labs(title = "游늵 Total Mail-To-Fund by Campaign (05/05/2025 - 08-01-2025)",
x = "Mail Date",
y = "Total Mail-To-Fund (%)",,
fill = "Campaign") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
ggplotly(p)
# NA values Need to either ignore these or populate the total mail pieces(Lower case and no spaces for snake type)
maildata_totalmail_na <- maildata %>% filter(is.na(total_mail_pieces))
# 游릴 Render searchable table with column filters
datatable(
maildata_totalmail_na,
filter = "top",
editable = TRUE,
options = list(
pageLength = 5,
scrollX = TRUE,
dom = 'Bfrtip',  # 游녣 enables buttons
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')  # 游녣 export formats
),
extensions = 'Buttons',
rownames = FALSE,
caption = "游늶 Total Mail Data missing from select dates"
)
# Load MailData.csv from 'data/processed' folder
maildata <- read_csv("../../data/processed/MailData.csv")
calls <- read_csv("../../data/processed/Calls_All.csv")
# Load MailData.csv from 'data/processed' folder
maildata <- read_csv("../../data/processed/MailData.csv")
calls <- read_csv("../../data/processed/Calls_All.csv")
LoanStatus <-  read_csv("../../data/processed/LoanStatus_clean.csv")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(plotly)
library(knitr)
library(kableExtra)
library(DT)
library(patchwork)
# Load MailData.csv from 'data/processed' folder
maildata <- read_csv("../../data/processed/MailData.csv")
calls <- read_csv("../../data/processed/Calls_All.csv")
LoanStatus <-  read_csv("../../data/processed/LoanStatus_clean.csv")
View(calls)
library(formattable)
install.packages('formattable')
library(formattable)
# Sample data
df <- data.frame(
Campaign = c("Camber", "Amsive", "Monster", "Redstone"),
ResponseRate = c(3.2, 5.8, 2.1, 4.5),
CallsPer10k = c(120, 95, 80, 110)
)
# Apply heatmap coloring
formattable(df, list(
ResponseRate = color_tile("white", "salmon"),
CallsPer10k = color_tile("white", "lightblue")
))
library(formattable)
# Sample data
df <- data.frame(
Campaign = c("Camber", "Amsive", "Monster", "Redstone"),
ResponseRate = c(3.2, 5.8, 2.1, 4.5),
CallsPer10k = c(120, 95, 80, 110)
)
# Apply heatmap coloring
formattable(df, list(
ResponseRate = color_tile("black", "salmon"),
CallsPer10k = color_tile("white", "lightblue")
))
